- name: Install prerequisites
  apt:
    name: 
        - apt-transport-https
        - ca-certificates
        - python-pip
    state: present

- name: Install Docker python modules (Ansible docker modules pre-reqs)
  pip:
    name: 
        - docker
        - jsondiff
        - pyyaml

- name: Add Docker Public Key
  apt_key:
    url: https://download.docker.com/linux/raspbian/gpg
    state: present

- name: Add Docker Repo
  apt_repository:
    repo: deb [arch=armhf] https://download.docker.com/linux/raspbian stretch stable
    state: present
    update_cache: yes

- name: Install docker-ce
  apt:
    name: docker-ce
    install_recommends: no
    state: present

- name: Start the swarm with default parameters
  when: inventory_hostname == groups['ClusterManagers'][0]
  docker_swarm:
    state: present
  register: swarm_info
  run_once: true

- set_fact:
    swarm_join_token: "{{ hostvars[groups['ClusterManagers'][0]].swarm_info.swarm_facts.JoinTokens.Worker }}"
    swarm_master_token: "{{ hostvars[groups['ClusterManagers'][0]].swarm_info.swarm_facts.JoinTokens.Manager }}"
    swarm_master_addr: "{{ hostvars[groups['ClusterManagers'][0]].ansible_facts.default_ipv4.address }}"

- name: Add manager nodes to the swarm
  when: "'ClusterManagers' in group_names" 
  docker_swarm:
    state: join
    advertise_addr: "{{ ansible_facts.default_ipv4.address }}"
    join_token: "{{ swarm_master_token }}"
    remote_addrs: [ "{{ swarm_master_addr }}:2377" ]

- name: Add worker nodes to the swarm
  when: "'ClusterWorkers' in group_names" 
  docker_swarm:
    state: join
    advertise_addr: "{{ ansible_facts.default_ipv4.address }}"
    join_token: "{{ swarm_join_token }}"
    remote_addrs: [ "{{ swarm_master_addr }}:2377" ]

- name: Add admin user to docker group
  user:
    name: "{{ admin_user }}"
    groups: docker
    append: yes

- name: Add Docker user groups accounts
  group:
    name: "{{ item.name }}"
    gid: "{{ item.gid }}"
  loop: "{{ docker_users }}"

- name: Create Docker user accounts
  user:
    name: "{{ item.name  }}"
    uid: "{{ item.uid }}"
    group: "{{ item.name  }}"
  loop: "{{ docker_users }}"

- name: Create Volume Directories
  file:
    name: "{{ item.value }}"
    state: directory
  loop: "{{ docker_volumes | dict2items }}"

- name: Pre-pull Docker images
  docker_image:
    source: pull
    name: "{{ item.value }}"
  loop: "{{ docker_images | dict2items }}"

- include_tasks: host_networks.yml
    
