- name: Install glusterfs-server
  apt:
    name: 
      - glusterfs-server
    state: present

- name: Allow unrestricted communication between cluster peers
  ufw:
    rule: allow
    from_ip: "{{ hostvars[item].ansible_default_ipv4.address }}"
    comment: "Cluster peer"
  loop: "{{ groups.Cluster }}"

- name: Initialise Gluster pool on one node
  gluster_peer:
    state: present
    nodes: "{{ groups.Cluster }}"
  run_once: true

- name: Ensure all nodes are joined to the trusted pool
  gluster_peer:
    state: present
    nodes: "{{ groups.Cluster }}"

- name: Mount Data directories
  when: inventory_hostname in item.nodes
  mount: 
    fstype: xfs
    src: "{{ item.src }}"
    path: "{{ item.path }}"
    state: mounted
    opts: "rw,inode64,noatime,nouuid"
  loop: "{{ gluster_storage }}"
  
- name: Create Gluster Volume
  gluster_volume:
    state: present
    name: "{{ item.name }}"
    bricks: "{{ item.path }}/brick"
    cluster: "{{ item.nodes }}"
    redundancies: 1
  loop: "{{ gluster_storage }}"
  run_once: true

# The simple way to mount disks is to use the mount module and update fstab.
# This leads to a race condition where mount tries to mount the glusterfs
# before gluster is up, so we use Systemd to do it instead.

- name: Create the mount point
  file:
     path: "/mnt/gluster/{{item.name}}"
     state: directory
  loop: "{{ gluster_storage }}"

- name: Add Systemd mount file
  template:
    src: gluster_mount.j2
    dest: "/etc/systemd/system/mnt-gluster-{{ item.name }}.mount"
  loop: "{{ gluster_storage }}"

- name: Start systemd service
  systemd:
    daemon_reload: yes
    name: "mnt-gluster-{{ item.name }}.mount"
    state: started
    enabled: yes
  loop: "{{ gluster_storage }}"
