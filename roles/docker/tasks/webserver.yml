- name: Create web services volume directories
  file:
    name: "{{ docker_volumes_dir }}/{{ item }}"
    state: directory
  loop:
    - "certbot/etc"
    - "certbot/www"
    - "nginx/bootstrap"
    - "nginx/html"
    - "nginx/conf"

- name: Copy build files to build node
  copy: 
    src: certbot/
    dest: certbot
    mode: preserve
  register: docker_certbot_source

- name: Rebuild image if required
  import_tasks: build_image.yml
  when: docker_certbot_source.changed
  vars:
    docker_build:
      image: "njdcourtney/pi-certbot"
      path: "certbot"

- name: Check whether certificate already exists
  stat: 
    path: "{{ docker_volumes_dir }}/certbot/etc/live/{{ webserver_domain }}/fullchain.pem"
  register: webserver_certificate

- name: Copy web content to nginx directories
  copy:
    src: nginx/html/
    dest: "{{ docker_volumes_dir }}/nginx/html"

# Bootstrap - Start NGinx on port 80 only and run certbot to generate initial cert.
# but only do this is cert doesn't already exist
- name: Bootstrap the certificate
  block:
    - name: Copy bootstrap nginx template
      template: 
        src: nginx/bootstrap.conf.j2
        dest: "{{ docker_volumes_dir }}/nginx/bootstrap/bootstrap.conf"

    - name: Spin up webserver for initial cert generation
      docker_container:
        name: nginx-bootstrap
        image: "nginx"
        detach: "yes"
        ports: 
          - "80:80"
        state: "started"
        volumes:
          - "{{ docker_volumes_dir }}/certbot/etc:/etc/letsencrypt:ro"
          - "{{ docker_volumes_dir }}/certbot/www:/var/www/certbot:ro"
          - "{{ docker_volumes_dir }}/nginx/bootstrap:/etc/nginx/conf.d"
          - "{{ docker_volumes_dir }}/nginx/html:/usr/share/nginx/html"

    - name: Do the initial certificate generation
      docker_container:
        name: certbot-bootstrap
        image: "njdcourtney/pi-certbot"
        volumes:
          - "{{ docker_volumes_dir }}/certbot/etc:/etc/letsencrypt"
          - "{{ docker_volumes_dir }}/certbot/www:/var/www/certbot"
        state: "started"
        detach: "no"
        cleanup: "yes"
        command: "certbot certonly --webroot -w /var/www/certbot --email {{ webserver_email }} --agree-tos --no-eff-email -d {{ webserver_domain }}"
  always:
    - name: Cleanup bootstrap webserver
      docker_container:
        name: nginx-bootstrap
        state: absent

  when: not webserver_certificate.stat.exists

- name: Download the latest certbot nginx config
  get_url:
    url: https://raw.githubusercontent.com/certbot/certbot/master/certbot-nginx/certbot_nginx/_internal/tls_configs/options-ssl-nginx.conf
    dest: "{{ docker_volumes_dir }}/certbot/etc/options-ssl-nginx.conf"

- name: Download the latest certbot nginx config
  get_url:
    url: https://raw.githubusercontent.com/certbot/certbot/master/certbot/certbot/ssl-dhparams.pem
    dest: "{{ docker_volumes_dir }}/certbot/etc/ssl-dhparams.pem"
  
- name: Copy nginx template
  template: 
    src: nginx/default.conf.j2
    dest: "{{ docker_volumes_dir }}/nginx/conf/default.conf"

- name: Deploy Web service
  docker_swarm_service:
    name: nginx
    image: nginx
    resolve_image: true
    publish: 
      - published_port: 80
        target_port: 80
      - published_port: 443
        target_port: 443
    mounts:
      - type: bind
        source: "{{ docker_volumes_dir }}/certbot/etc"
        target: /etc/letsencrypt
        readonly: yes
      - type: bind
        source: "{{ docker_volumes_dir }}/certbot/www"
        target: /var/www/certbot
        readonly: yes
      - type: bind
        source: "{{ docker_volumes_dir }}/nginx/conf"
        target: /etc/nginx/conf.d
      - type: bind
        source: "{{ docker_volumes_dir }}/nginx/html"
        target: /usr/share/nginx/html
    restart_config:
      condition: on-failure
